<?php

/**
 * @file
 * Install, update, and uninstall functions for the membership_entity module.
 */

/**
 * Implements hook_requirements().
 */
function membership_entity_type_requirements($phase) {
  $requirements = array();
  $t = get_t();

  if ($phase == 'runtime') {
    $types = db_query('SELECT type, label, data FROM {membership_entity_type}');
    foreach ($types as $type) {
      $data = unserialize($type->data);

      if (empty($data)) {
        $requirements["membership_entity_type_$type->type"] = array(
          'title' => $t('@type Settings', array('@type' => $type->label)),
          'value' => $t('Missing configuration'),
          'description' => $t('Missing configuration settings for membership type %type. Please visit the <a href="!url">settings page</a> to configure the membership type.', array(
            '%type' => $type->label,
            '!url' => url("admin/memberships/types/manage/$type->type"),
          )),
          'severity' => REQUIREMENT_ERROR,
        );
      }
    }
  }

  return $requirements;
}

/**
 * Implements hook_schema().
 */
function membership_entity_type_schema() {
  $schema['membership_entity_type'] = array(
    'description' => 'Stores information about all defined membership types (bundles).',
    'fields' => array(
      'id' => array(
        'description' => 'Primary Key: Unique profile type ID.',
        'type' => 'serial',
        'not null' => TRUE,
      ),
      'revision_id' => array(
        'description' => 'The default membership entity type revision id',
        'type' => 'int',
        'unsigned' => TRUE,
        'not null' => FALSE,
        'default' => NULL,
      ),
      'type' => array(
        'description' => 'The machine-readable name of this membership entity type.',
        'type' => 'varchar',
        'length' => 32,
        'not null' => TRUE,
      ),
      'label' => array(
        'description' => 'The human-readable name of this membership entity type.',
        'type' => 'varchar',
        'length' => 255,
        'not null' => TRUE,
        'default' => '',
        'translatable' => TRUE,
      ),
      'weight' => array(
        'description' => 'The weight of this membership entity type in relation to others.',
        'type' => 'int',
        'not null' => TRUE,
        'default' => 0,
      ),
      'description' => array(
        'description' => 'A brief description of this type.',
        'type' => 'text',
        'not null' => FALSE,
        'size' => 'medium',
        'translatable' => TRUE,
      ),
      'data' => array(
        'description' => 'A serialized array of additional settings.',
        'type' => 'text',
        'not null' => FALSE,
        'size' => 'big',
        'serialize' => TRUE,
      ),
      // Exportable fields.
      // @see entity_exportable_schema_fields().
      'status' => array(
        'type' => 'int',
        'not null' => TRUE,
        'default' => 0x01,
        'size' => 'tiny',
        'description' => 'The exportable status of the entity.',
      ),
      'module' => array(
        'description' => 'The name of the providing module if the entity has been defined in code.',
        'type' => 'varchar',
        'length' => 255,
        'not null' => FALSE,
      ),
    ),
    'unique keys' => array(
      'type' => array('type'),
      'label' => array('label'),
    ),
    'primary key' => array('id'),
  );

  // Membership type revision table.
  $schema['membership_entity_type_revision'] = array(
    'description' => 'Stores revisions for membership types (bundles).',
    'fields' => array(
      'revision_id' => array(
        'type' => 'serial',
        'not null' => TRUE,
        'description' => 'Primary Key: Unique membership entity type revision ID.',
      ),
      'id' => array(
        'type' => 'int',
        'unsigned' => TRUE,
        'not null' => FALSE,
        'default' => NULL,
        'description' => 'The ID of the attached membership entity type.',
      ),
      'type' => array(
        'description' => 'The machine-readable name of this membership entity type.',
        'type' => 'varchar',
        'length' => 32,
        'not null' => TRUE,
      ),
      'label' => array(
        'description' => 'The human-readable name of this membership entity type.',
        'type' => 'varchar',
        'length' => 255,
        'not null' => TRUE,
        'default' => '',
        'translatable' => TRUE,
      ),
      'weight' => array(
        'description' => 'The weight of this membership entity type in relation to others.',
        'type' => 'int',
        'not null' => TRUE,
        'default' => 0,
      ),
      'description' => array(
        'description' => 'A brief description of this type.',
        'type' => 'text',
        'not null' => FALSE,
        'size' => 'medium',
        'translatable' => TRUE,
      ),
      'data' => array(
        'description' => 'A serialized array of additional settings.',
        'type' => 'text',
        'not null' => FALSE,
        'size' => 'big',
        'serialize' => TRUE,
      ),
      'status' => array(
        'type' => 'int',
        'not null' => TRUE,
        'default' => 0x01,
        'size' => 'tiny',
        'description' => 'The exportable status of the entity.',
      ),
      'module' => array(
        'description' => 'The name of the providing module if the entity has been defined in code.',
        'type' => 'varchar',
        'length' => 255,
        'not null' => FALSE,
      ),
    ),
    'unique keys' => array(
      'revision_id' => array('revision_id'),
    ),
    'primary key' => array('revision_id'),
  );

  return $schema;
}

/**
 * Implements hook_install().
 */
function membership_entity_type_install() {
  $t = get_t();

  // Add an initial membership type and copy existing configuration.
  $type = entity_create('membership_entity_type', array(
    'type' => 'membership',
    'label' => $t('Membership'),
    'description' => $t('A regular membership.'),
    'weight' => 0,
    'data' => variable_get('membership_entity_settings', array()),
  ));
  $type->save();
}

/**
 * Add Revisions capability.
 *
 * Add revision_id to membership_entity table and create
 * membership_entity_revision table.
 */
function membership_entity_type_update_7001() {
  // Copied from membership_entity_schema() because the schema should not
  // be directly used during hook_update_N.
  $schema['membership_entity_type_revision'] = array(
    'description' => 'Stores revisions for membership types (bundles).',
    'fields' => array(
      'revision_id' => array(
        'type' => 'serial',
        'not null' => TRUE,
        'description' => 'Primary Key: Unique membership entity type revision ID.',
      ),
      'id' => array(
        'type' => 'int',
        'unsigned' => TRUE,
        'not null' => FALSE,
        'default' => NULL,
        'description' => 'The ID of the attached membership entity type.',
      ),
      'type' => array(
        'description' => 'The machine-readable name of this membership entity type.',
        'type' => 'varchar',
        'length' => 32,
        'not null' => TRUE,
      ),
      'label' => array(
        'description' => 'The human-readable name of this membership entity type.',
        'type' => 'varchar',
        'length' => 255,
        'not null' => TRUE,
        'default' => '',
        'translatable' => TRUE,
      ),
      'weight' => array(
        'description' => 'The weight of this membership entity type in relation to others.',
        'type' => 'int',
        'not null' => TRUE,
        'default' => 0,
      ),
      'description' => array(
        'description' => 'A brief description of this type.',
        'type' => 'text',
        'not null' => FALSE,
        'size' => 'medium',
        'translatable' => TRUE,
      ),
      'data' => array(
        'description' => 'A serialized array of additional settings.',
        'type' => 'text',
        'not null' => FALSE,
        'size' => 'big',
        'serialize' => TRUE,
      ),
      'status' => array(
        'type' => 'int',
        'not null' => TRUE,
        'default' => 0x01,
        'size' => 'tiny',
        'description' => 'The exportable status of the entity.',
      ),
      'module' => array(
        'description' => 'The name of the providing module if the entity has been defined in code.',
        'type' => 'varchar',
        'length' => 255,
        'not null' => FALSE,
      ),
    ),
    'unique keys' => array(
      'revision_id' => array('revision_id'),
    ),
    'primary key' => array('revision_id'),
  );

  // Create the revisions table.
  if (!db_table_exists('membership_entity_type_revision')) {
    db_create_table(
      'membership_entity_type_revision',
      $schema['membership_entity_type_revision']
    );
  }

  // Create the a field for the default revision.
  if (!db_field_exists('membership_entity_type', 'revision_id')) {
    db_add_field(
      'membership_entity_type',
      'revision_id',
      array(
        'description' => 'The default membership entity type revision id',
        'type' => 'int',
        'unsigned' => TRUE,
        'not null' => FALSE,
        'default' => NULL,
      )
    );
  }

  // Refresh schema caches.
  $schema = drupal_get_schema(NULL, TRUE);
}

/**
 * Create revisions for all existing membership entity types.
 */
function membership_entity_type_update_7002() {
  $memberships_types = db_query('SELECT * FROM membership_entity_type')->fetchAll();
  foreach ($memberships_types as $type) {
    $revision_id = db_insert('membership_entity_type_revision')
      ->fields(array(
        'id' => $type->id,
        'type' => $type->type,
        'label' => $type->label,
        'weight' => $type->weight,
        'description' => $type->description,
        'data' => $type->data,
        'status' => $type->status,
        'module' => $type->module,
      ))
      ->execute();

    db_update('membership_entity_type')
      ->condition('mid', $type->mid)
      ->fields(array(
        'revision_id' => $revision_id,
      ))
      ->execute();
  }
}
